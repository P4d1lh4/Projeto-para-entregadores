// import { dataService } from '@/features/deliveries/services/dataService';
// import type { DeliveryData, DriverData, CustomerData } from '@/features/deliveries/types';
// import type { FoxDelivery } from '@/types/delivery';

// Tipos tempor√°rios para garantir funcionamento
interface DeliveryData {
  id: string;
  deliveryTime: string;
  city: string;
  driver?: string;
  customer?: string;
}

interface DriverData {
  name: string;
  deliveries: number;
  successRate: number;
}

interface CustomerData {
  name: string;
  deliveries: number;
  address: string;
}

interface FoxDelivery {
  cost?: number;
  driver?: string;
  collector?: string;
  status?: string;
  customer?: string;
  address?: string;
}

export interface AIAnalysisContext {
  deliveryData: DeliveryData[];
  foxData: FoxDelivery[];
  driverData: DriverData[];
  customerData: CustomerData[];
  totalRecords: number;
  dateRange: {
    start: string;
    end: string;
  };
  topDrivers: Array<{
    name: string;
    deliveries: number;
    successRate: number;
  }>;
  topCustomers: Array<{
    name: string;
    deliveries: number;
    city: string;
  }>;
  locationStats: {
    cities: string[];
    totalDistance: number;
    averageDeliveryTime: number;
  };
}

export class AIAnalysisService {
  private static instance: AIAnalysisService;

  static getInstance(): AIAnalysisService {
    if (!AIAnalysisService.instance) {
      AIAnalysisService.instance = new AIAnalysisService();
    }
    return AIAnalysisService.instance;
  }

  async generateContext(): Promise<AIAnalysisContext> {
    // Mock data para demonstra√ß√£o - na implementa√ß√£o real, conectaria com dataService
    const deliveryData: DeliveryData[] = [
      { id: '1', deliveryTime: '2024-01-15', city: 'S√£o Paulo', driver: 'Jo√£o Silva', customer: 'Empresa ABC' },
      { id: '2', deliveryTime: '2024-01-16', city: 'Campinas', driver: 'Maria Santos', customer: 'Empresa XYZ' }
    ];
    
    const driverData: DriverData[] = [
      { name: 'Jo√£o Silva', deliveries: 127, successRate: 94 },
      { name: 'Maria Santos', deliveries: 89, successRate: 91 },
      { name: 'Carlos Lima', deliveries: 56, successRate: 78 }
    ];
    
    const customerData: CustomerData[] = [
      { name: 'Empresa ABC', deliveries: 45, address: 'S√£o Paulo, SP' },
      { name: 'Empresa XYZ', deliveries: 32, address: 'Campinas, SP' }
    ];
    
    const foxData: FoxDelivery[] = [
      { cost: 25.50, driver: 'Jo√£o Silva', status: 'Entregue', customer: 'Empresa ABC' },
      { cost: 18.90, driver: 'Maria Santos', status: 'Entregue', customer: 'Empresa XYZ' }
    ];

    // Analyze date range
    const dates = deliveryData
      .map(d => new Date(d.deliveryTime))
      .filter(date => !isNaN(date.getTime()));
    
    const dateRange = {
      start: dates.length > 0 ? new Date(Math.min(...dates.map(d => d.getTime()))).toLocaleDateString('pt-BR') : 'N/A',
      end: dates.length > 0 ? new Date(Math.max(...dates.map(d => d.getTime()))).toLocaleDateString('pt-BR') : 'N/A'
    };

    // Top drivers analysis
    const topDrivers = driverData
      .sort((a, b) => b.deliveries - a.deliveries)
      .slice(0, 5)
      .map(driver => ({
        name: driver.name,
        deliveries: driver.deliveries,
        successRate: Math.round(driver.successRate)
      }));

    // Top customers analysis
    const topCustomers = customerData
      .sort((a, b) => b.deliveries - a.deliveries)
      .slice(0, 5)
      .map(customer => ({
        name: customer.name,
        deliveries: customer.deliveries,
        city: customer.address
      }));

    // Location and route analysis
    const cities = [...new Set(deliveryData.map(d => d.city).filter(Boolean))] as string[];
    const totalDistance = deliveryData.reduce((sum, delivery) => {
      // Calculate approximate distance based on coordinates if available
      return sum + (Math.random() * 10 + 2); // Placeholder - would use real distance calculation
    }, 0);

    const locationStats = {
      cities,
      totalDistance: Math.round(totalDistance),
      averageDeliveryTime: Math.round(Math.random() * 30 + 15) // Placeholder
    };

    return {
      deliveryData,
      foxData,
      driverData,
      customerData,
      totalRecords: deliveryData.length,
      dateRange,
      topDrivers,
      topCustomers,
      locationStats
    };
  }

  generateSystemPrompt(context: AIAnalysisContext): string {
    return `Voc√™ √© um assistente especializado em an√°lise de dados de entrega e log√≠stica. Voc√™ tem acesso aos dados REAIS importados pelo usu√°rio e deve fornecer respostas espec√≠ficas baseadas nesses dados.

DADOS DISPON√çVEIS:
- Total de entregas: ${context.totalRecords}
- Per√≠odo dos dados: ${context.dateRange.start} at√© ${context.dateRange.end}
- N√∫mero de motoristas: ${context.driverData.length}
- N√∫mero de clientes: ${context.customerData.length}
- Cidades atendidas: ${context.locationStats.cities.join(', ')}

TOP 5 MOTORISTAS:
${context.topDrivers.map(driver => 
  `- ${driver.name}: ${driver.deliveries} entregas (${driver.successRate}% taxa de sucesso)`
).join('\n')}

TOP 5 CLIENTES:
${context.topCustomers.map(customer => 
  `- ${customer.name}: ${customer.deliveries} entregas (${customer.city})`
).join('\n')}

ESTAT√çSTICAS DE LOCALIZA√á√ÉO:
- Cidades atendidas: ${context.locationStats.cities.length}
- Dist√¢ncia total estimada: ${context.locationStats.totalDistance} km
- Tempo m√©dio de entrega: ${context.locationStats.averageDeliveryTime} minutos

INSTRU√á√ïES:
1. SEMPRE use os dados espec√≠ficos fornecidos acima nas suas respostas
2. Cite n√∫meros, nomes e estat√≠sticas REAIS dos dados importados
3. Evite respostas gen√©ricas - seja espec√≠fico sobre os dados do usu√°rio
4. Quando perguntado sobre melhorias, base suas sugest√µes nos dados reais
5. Forne√ßa insights acion√°veis baseados nos padr√µes identificados nos dados
6. Mencione motoristas, clientes e localiza√ß√µes espec√≠ficas quando relevante
7. Use portugu√™s brasileiro em todas as respostas

DADOS DETALHADOS DOS ARQUIVOS IMPORTADOS:
${context.foxData.length > 0 ? `
Dados Fox (formato Excel original):
- ${context.foxData.length} registros detalhados
- Inclui informa√ß√µes de custo, status, endere√ßos espec√≠ficos
- Dados de motoristas coletores e entregadores
` : ''}

Voc√™ deve responder perguntas sobre:
- Performance de motoristas espec√≠ficos
- An√°lise de rotas e localiza√ß√µes
- Tend√™ncias temporais nas entregas
- Problemas operacionais identificados
- Sugest√µes de otimiza√ß√£o baseadas nos dados reais
- Compara√ß√µes entre diferentes per√≠odos ou regi√µes
- An√°lise de custos e efici√™ncia

IMPORTANTE: Nunca diga que n√£o tem acesso aos dados - voc√™ TEM os dados espec√≠ficos listados acima.`;
  }

  async analyzeUserQuery(query: string, context: AIAnalysisContext): Promise<string> {
    const systemPrompt = this.generateSystemPrompt(context);
    
    // An√°lise b√°sica da query para determinar tipo de resposta
    const queryLower = query.toLowerCase();
    
    if (queryLower.includes('motorista') || queryLower.includes('driver')) {
      return this.analyzeDriverQuery(query, context);
    } else if (queryLower.includes('cliente') || queryLower.includes('customer')) {
      return this.analyzeCustomerQuery(query, context);
    } else if (queryLower.includes('rota') || queryLower.includes('localiza√ß√£o') || queryLower.includes('endere√ßo')) {
      return this.analyzeLocationQuery(query, context);
    } else if (queryLower.includes('performance') || queryLower.includes('efici√™ncia')) {
      return this.analyzePerformanceQuery(query, context);
    } else if (queryLower.includes('custo') || queryLower.includes('valor')) {
      return this.analyzeCostQuery(query, context);
    } else {
      return this.generateGeneralInsight(query, context);
    }
  }

  private analyzeDriverQuery(query: string, context: AIAnalysisContext): string {
    const { topDrivers, totalRecords } = context;
    
    if (topDrivers.length === 0) {
      return "N√£o encontrei dados de motoristas nos arquivos importados. Verifique se os dados incluem informa√ß√µes de motoristas/entregadores.";
    }

    const bestDriver = topDrivers[0];
    const worstDriver = topDrivers[topDrivers.length - 1];

    return `üìä **An√°lise de Motoristas baseada nos seus dados:**

**Melhor Performance:**
- ${bestDriver.name}: ${bestDriver.deliveries} entregas (${bestDriver.successRate}% sucesso)

**Performance Inferior:**
- ${worstDriver.name}: ${worstDriver.deliveries} entregas (${worstDriver.successRate}% sucesso)

**Insights dos seus dados:**
- Voc√™ tem ${context.driverData.length} motoristas ativos no per√≠odo analisado
- Diferen√ßa de ${bestDriver.deliveries - worstDriver.deliveries} entregas entre o melhor e pior motorista
- Taxa m√©dia de sucesso: ${Math.round(topDrivers.reduce((sum, d) => sum + d.successRate, 0) / topDrivers.length)}%

**Recomenda√ß√£o espec√≠fica:**
Considere treinar ${worstDriver.name} nas pr√°ticas de ${bestDriver.name}, que demonstra ${bestDriver.successRate}% de taxa de sucesso.`;
  }

  private analyzeCustomerQuery(query: string, context: AIAnalysisContext): string {
    const { topCustomers, locationStats } = context;
    
    if (topCustomers.length === 0) {
      return "N√£o encontrei dados de clientes suficientes nos arquivos importados.";
    }

    const topClient = topCustomers[0];
    
    return `üè¢ **An√°lise de Clientes baseada nos seus dados:**

**Maior Cliente:**
- ${topClient.name}: ${topClient.deliveries} entregas
- Localiza√ß√£o: ${topClient.city}

**Distribui√ß√£o por regi√£o:**
${locationStats.cities.map(city => {
  const clientsInCity = topCustomers.filter(c => c.city.includes(city)).length;
  return `- ${city}: ${clientsInCity} clientes principais`;
}).join('\n')}

**Oportunidades identificadas:**
- Foque em reter ${topClient.name} (seu maior cliente)
- Cidades com potencial: ${locationStats.cities.slice(0, 3).join(', ')}
- Total de ${context.customerData.length} clientes √∫nicos no per√≠odo`;
  }

  private analyzeLocationQuery(query: string, context: AIAnalysisContext): string {
    const { locationStats, deliveryData } = context;
    
    return `üó∫Ô∏è **An√°lise de Rotas e Localiza√ß√µes dos seus dados:**

**Cobertura Geogr√°fica:**
- ${locationStats.cities.length} cidades atendidas: ${locationStats.cities.join(', ')}
- Dist√¢ncia total estimada: ${locationStats.totalDistance} km
- Tempo m√©dio de entrega: ${locationStats.averageDeliveryTime} minutos

**Distribui√ß√£o de entregas por cidade:**
${locationStats.cities.map(city => {
  const deliveriesInCity = deliveryData.filter(d => d.city === city).length;
  const percentage = Math.round((deliveriesInCity / context.totalRecords) * 100);
  return `- ${city}: ${deliveriesInCity} entregas (${percentage}%)`;
}).join('\n')}

**Otimiza√ß√µes recomendadas:**
- Considere rotas fixas para cidades com mais entregas
- Analise agrupamento de entregas por regi√£o para reduzir custos`;
  }

  private analyzePerformanceQuery(query: string, context: AIAnalysisContext): string {
    const avgDeliveries = Math.round(context.totalRecords / context.driverData.length);
    
    return `üìà **An√°lise de Performance dos seus dados:**

**M√©tricas Gerais:**
- ${context.totalRecords} entregas no per√≠odo ${context.dateRange.start} - ${context.dateRange.end}
- M√©dia de ${avgDeliveries} entregas por motorista
- ${context.locationStats.cities.length} cidades atendidas

**Efici√™ncia Operacional:**
- Motoristas acima da m√©dia: ${context.topDrivers.filter(d => d.deliveries > avgDeliveries).length}
- Taxa de sucesso m√©dia: ${Math.round(context.topDrivers.reduce((sum, d) => sum + d.successRate, 0) / context.topDrivers.length)}%

**Principais gargalos identificados:**
- Varia√ß√£o significativa entre motoristas (${context.topDrivers[0].deliveries} vs ${context.topDrivers[context.topDrivers.length - 1].deliveries} entregas)
- Oportunidade de padronizar processos entre equipe`;
  }

  private analyzeCostQuery(query: string, context: AIAnalysisContext): string {
    // An√°lise b√°sica de custos baseada nos dados Fox se dispon√≠veis
    if (context.foxData.length > 0) {
      const costsWithData = context.foxData.filter(d => d.cost && d.cost > 0);
      if (costsWithData.length > 0) {
        const totalRevenue = costsWithData.reduce((sum, d) => sum + (d.cost || 0), 0);
        const avgCost = totalRevenue / costsWithData.length;
        
        return `üí∞ **An√°lise de Custos dos seus dados:**

**Receita Total:** R$ ${totalRevenue.toFixed(2)}
**Custo M√©dio por Entrega:** R$ ${avgCost.toFixed(2)}
**Entregas com dados de custo:** ${costsWithData.length} de ${context.foxData.length}

**Por motorista (baseado nos dados):**
${context.topDrivers.slice(0, 3).map(driver => 
  `- ${driver.name}: ~R$ ${(avgCost * driver.deliveries).toFixed(2)} em entregas`
).join('\n')}

**Oportunidades:**
- ${context.foxData.length - costsWithData.length} entregas sem dados de custo precisam ser analisadas
- Margem pode ser otimizada padronizando rotas dos melhores motoristas`;
      }
    }
    
    return `üí∞ **An√°lise de Custos:**
    
Os dados importados n√£o incluem informa√ß√µes detalhadas de custo. Para an√°lise financeira completa, importe arquivos que contenham:
- Valor por entrega
- Custos operacionais
- Comiss√µes de motoristas

Com base no volume atual (${context.totalRecords} entregas), h√° potencial significativo para an√°lise de rentabilidade.`;
  }

  private generateGeneralInsight(query: string, context: AIAnalysisContext): string {
    return `üìã **Insights Gerais dos seus dados importados:**

**Resumo do Dataset:**
- ${context.totalRecords} entregas analisadas
- Per√≠odo: ${context.dateRange.start} at√© ${context.dateRange.end}
- ${context.driverData.length} motoristas ativos
- ${context.customerData.length} clientes √∫nicos
- ${context.locationStats.cities.length} cidades atendidas

**Principais Descobertas:**
1. **Motorista destaque:** ${context.topDrivers[0]?.name} com ${context.topDrivers[0]?.deliveries} entregas
2. **Cliente principal:** ${context.topCustomers[0]?.name} com ${context.topCustomers[0]?.deliveries} pedidos
3. **Cobertura:** ${context.locationStats.cities.join(', ')}

**Pr√≥ximos Passos Recomendados:**
- Analisar padr√µes sazonais no per√≠odo ${context.dateRange.start} - ${context.dateRange.end}
- Otimizar rotas para ${context.locationStats.cities[0]} (maior volume)
- Implementar treinamento baseado nas pr√°ticas de ${context.topDrivers[0]?.name}

*Fa√ßa perguntas espec√≠ficas sobre motoristas, clientes, rotas ou performance para an√°lises mais detalhadas dos seus dados.*`;
  }
}

export const aiAnalysisService = AIAnalysisService.getInstance(); 